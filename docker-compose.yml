version: "3"
services:
  zookeeper:
    image: ubuntu/zookeeper:latest
    container_name: zookeeper_new
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper_new:2888:3888
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka_new
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_new:9092,PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper_new:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - backend

  postgres:
    image: ubuntu/postgres:latest
    container_name: postgres_new
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: ["postgres", "-c", "log_statement=all"]
    depends_on:
      - kafka
    networks:
      - backend

  grafana:
    image: ubuntu/grafana:latest
    container_name: grafana_new
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./defaults.ini:/etc/grafana/grafana.ini
    depends_on:
      - postgres
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    networks:
      - backend

  frontend:
    image: node:latest
    container_name: frontend
    ports:
      - "8080:8080"
    volumes:
      - ./frontend:/app
    working_dir: /app
    command: npm start
    networks:
      - backend

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop_new
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka_new:9092"
    depends_on:
      - kafka
    networks:
      - backend

volumes:
  postgres_data:
    driver: local
  grafana_data:
    driver: local

networks:
  backend:
    driver: bridge
