version: "3.2"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper_new
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper_new:2888:3888
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka_new
    network_mode: host
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper_new:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://83.175.123.10:29092,PLAINTEXT_HOST://83.175.123.10:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    depends_on:
      - zookeeper
    volumes:
      - ./server.properties:/etc/kafka/server.properties
      - ./create-topic.sh:/docker-entrypoint-init.d/create-topic.sh

  postgres:
    image: postgres:latest
    container_name: postgres_new
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_new
    ports:
      - "8080:8080"
    volumes:
      - grafana_data:/var/lib/grafana
      - /var/www/echtzeitvisualisierung-von-gebaeudeindustriedaten/grafana.ini:/etc/grafana/grafana.ini:ro
    depends_on:
      - postgres
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "6060:80"
    networks:
      - backend

  kafka-producer:
    build:
      context: ./kafka
      dockerfile: Dockerfile-producer
    container_name: kafka-producer
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka_new:29092 # Interne Verbindung
      - KAFKA_TOPICS=${KAFKA_TOPICS}
      - PRODUCER_INTERVAL_SECONDS=${PRODUCER_INTERVAL_SECONDS}
      - CONSUMER_POSTGRES_USER=${CONSUMER_POSTGRES_USER}
      - CONSUMER_POSTGRES_PASSWORD=${CONSUMER_POSTGRES_PASSWORD}
      - CONSUMER_POSTGRES_DB=${CONSUMER_POSTGRES_DB}
      - CONSUMER_POSTGRES_HOST=${CONSUMER_POSTGRES_HOST}
      - CONSUMER_POSTGRES_PORT=${CONSUMER_POSTGRES_PORT}
    networks:
      - backend
    depends_on:
      - kafka
      - postgres

  kafka-consumer:
    build:
      context: ./kafka
      dockerfile: Dockerfile-consumer
    container_name: kafka-consumer
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka_new:29092 # Interne Verbindung
      - KAFKA_TOPICS=${KAFKA_TOPICS}
      - CONSUMER_POSTGRES_USER=${CONSUMER_POSTGRES_USER}
      - CONSUMER_POSTGRES_PASSWORD=${CONSUMER_POSTGRES_PASSWORD}
      - CONSUMER_POSTGRES_DB=${CONSUMER_POSTGRES_DB}
      - CONSUMER_POSTGRES_HOST=${CONSUMER_POSTGRES_HOST}
      - CONSUMER_POSTGRES_PORT=${CONSUMER_POSTGRES_PORT}
    networks:
      - backend
    depends_on:
      - kafka
      - postgres

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend

  frontend:
    image: node:18-alpine
    container_name: frontend
    ports:
      - "3000:3000"
    volumes:
      - ./visualization/frontend:/app
      - /app/node_modules
    working_dir: /app
    command: sh -c "npm install && npm start"
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "512M"

  backend:
    image: node:18-alpine
    container_name: backend
    ports:
      - "5000:5000"
    volumes:
      - ./visualization/server:/app
      - ./visualization/server/node_modules:/app/node_modules
    working_dir: /app
    command: sh -c "npm install && npm start"
    networks:
      - backend
    depends_on:
      - postgres
    environment:
      - JWT_SECRET=test
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "512M"

  nginx:
    image: nginx:mainline-alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/www/echtzeitvisualisierung-von-gebaeudeindustriedaten/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /var/www/echtzeitvisualisierung-von-gebaeudeindustriedaten/nginx/conf.d/:/etc/nginx/conf.d/:ro
      - /var/www/echtzeitvisualisierung-von-gebaeudeindustriedaten/nginx/plugins.d/:/etc/nginx/plugins.d/:ro
      - /var/www/echtzeitvisualisierung-von-gebaeudeindustriedaten/nginx/sites-enabled.d/:/etc/nginx/sites-enabled.d/:ro
      - /var/www/echtzeitvisualisierung-von-gebaeudeindustriedaten/nginx/ssl/:/etc/nginx/ssl/:ro
      - /var/www/echtzeitvisualisierung-von-gebaeudeindustriedaten/www/:/var/www:ro
    networks:
      - backend
    depends_on:
      - frontend
      - backend
      - grafana
      - pgadmin
      - portainer

volumes:
  postgres_data:
    driver: local
  grafana_data:
    driver: local

networks:
  backend:
    driver: bridge
