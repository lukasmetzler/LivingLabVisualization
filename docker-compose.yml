version: "3"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper_new
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper_new:2888:3888
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka_new
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_new:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper_new:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    depends_on:
      - zookeeper
    #volumes:
    #  - ./create_kafka_topics.sh:/usr/bin/create_kafka_topics.sh
    #command: ["sh", "-c", "/etc/confluent/docker/run & /usr/bin/create_kafka_topics.sh && tail -f /dev/null"]
    networks:
      - backend

  postgres:
    image: postgres:latest
    container_name: postgres_new
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: lukasmetzler
      POSTGRES_PASSWORD: lukasmetzler
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_new
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./defaults.ini:/etc/grafana/grafana.ini
    depends_on:
      - postgres
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    networks:
      - backend

  kafka-producer:
    build:
      context: ./kafka
      dockerfile: Dockerfile-producer
    container_name: kafka-producer
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka_new:9092
      - KAFKA_TOPIC=hella_data_topic
      - PRODUCER_INTERVAL_SECONDS=60
      - CONSUMER_POSTGRES_USER=lukasmetzler
      - CONSUMER_POSTGRES_PASSWORD=lukasmetzler
      - CONSUMER_POSTGRES_DB=evi
      - CONSUMER_POSTGRES_HOST=postgres_new
      - CONSUMER_POSTGRES_PORT=5432
    networks:
      - backend
    depends_on:
      - kafka
      - postgres

  kafka-consumer:
    build:
      context: ./kafka
      dockerfile: Dockerfile-consumer
    container_name: kafka-consumer
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka_new:9092
      - KAFKA_TOPIC=hella_data_topic
      - CONSUMER_POSTGRES_USER=lukasmetzler
      - CONSUMER_POSTGRES_PASSWORD=lukasmetzler
      - CONSUMER_POSTGRES_DB=evi
      - CONSUMER_POSTGRES_HOST=postgres_new
      - CONSUMER_POSTGRES_PORT=5432
    networks:
      - backend
    depends_on:
      - kafka
      - postgres

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend

  frontend:
    image: node:18-alpine
    container_name: frontend
    ports:
      - "3000:3000"
    volumes:
      - ./visualization/frontend:/app
      - /app/node_modules
    working_dir: /app
    command: sh -c "npm install && npm run build && npm start"
    networks:
      - backend

  backend:
    image: node:18-alpine
    container_name: backend
    ports:
      - "5000:5000"
    volumes:
      - ./visualization/server:/app
      - /app/node_modules
    working_dir: /app
    command: sh -c "npm install && npm start"
    networks:
      - backend
    depends_on:
      - postgres
    environment:
      - JWT_SECRET=test

volumes:
  postgres_data:
    driver: local
  grafana_data:
    driver: local

networks:
  backend:
    driver: bridge
