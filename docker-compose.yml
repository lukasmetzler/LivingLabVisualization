version: "3"

networks:
  app-tier:
    driver: bridge

services:
  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - app-tier
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "echo", "exit"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-init:
    image: bitnami/kafka:latest
    command: ["/bin/bash", "-c", "/create_topic.sh"]
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - type: bind
        source: ./create_topic.sh
        target: /create_topic.sh
    init: true

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - app-tier

  postgres:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: lukasmetzler
      POSTGRES_DB: evi
      POSTGRES_PASSWORD: lukasmetzler
    volumes:
      - postgres-data:/var/lib/postgresql/data
    command: ["postgres", "-c", "log_statement=all"]
    depends_on:
      - zookeeper
    networks:
      - app-tier

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - postgres
    networks:
      - app-tier

  grafana:
    build: ./grafana-config
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    networks:
      - app-tier

  kafka-ui:
    image: landoop/fast-data-dev
    ports:
      - "3030:3030"
    environment:
      ADV_HOST: localhost
    depends_on:
      - kafka
    networks:
      - app-tier

  producer:
    build:
      context: ./kafka
      dockerfile: Dockerfile
    command: ["python", "producer.py"]
    depends_on:
      - kafka
    networks:
      - app-tier

  consumer:
    build:
      context: ./kafka
      dockerfile: Dockerfile
    command: ["python", "consumer.py"]
    depends_on:
      - kafka
    networks:
      - app-tier

volumes:
  postgres-data:
