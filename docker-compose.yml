version: "3.2"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper_new
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka_new
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper_new:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      #KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka_new:29092,EXTERNAL://83.175.123.10:9092 #Hella Server
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka_new:29092,EXTERNAL://85.215.59.47:9092 #Mein Server
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - ./create-topic.sh:/docker-entrypoint-init.d/create-topic.sh
    networks:
      - kafka-net

  postgres:
    image: postgres:latest
    container_name: postgres_new
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-init.d/init-db.sh
    ports:
      - "5432:5432"
    networks:
      - kafka-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_new
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana.ini:/etc/grafana/grafana.ini:ro
    depends_on:
      - postgres
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    networks:
      - kafka-net

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - kafka-net

  kafka-producer:
    build:
      context: ./kafka
      dockerfile: Dockerfile-producer
    container_name: kafka-producer
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka_new:29092
      - KAFKA_TOPICS=${KAFKA_TOPICS}
      - PRODUCER_INTERVAL_SECONDS=${PRODUCER_INTERVAL_SECONDS}
      - CONSUMER_POSTGRES_USER=${CONSUMER_POSTGRES_USER}
      - CONSUMER_POSTGRES_PASSWORD=${CONSUMER_POSTGRES_PASSWORD}
      - CONSUMER_POSTGRES_DB=${CONSUMER_POSTGRES_DB}
      - CONSUMER_POSTGRES_HOST=postgres_new
      - CONSUMER_POSTGRES_PORT=5432
    depends_on:
      - kafka
      - postgres
    networks:
      - kafka-net

  kafka-consumer:
    build:
      context: ./kafka
      dockerfile: Dockerfile-consumer
    container_name: kafka-consumer
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka_new:29092
      - KAFKA_TOPICS=hella_data_topic,zed_kamera_topic
      - CONSUMER_POSTGRES_USER=lukasmetzler
      - CONSUMER_POSTGRES_PASSWORD=lukasmetzler
      - CONSUMER_POSTGRES_DB=livinglabvisualization
      - CONSUMER_POSTGRES_HOST=postgres_new
      - CONSUMER_POSTGRES_PORT=5432
    depends_on:
      - kafka
      - postgres
    networks:
      - kafka-net

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "9000:9000"
    networks:
      - kafka-net

  livinglab:
    build:
      context: .
      dockerfile: Dockerfile-livinglab
    container_name: livinglab
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - DB_HOST=postgres_new
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
    depends_on:
      - postgres
      - kafka
      - zookeeper
    ports:
      - "3001:3001"
    volumes:
      # Entferne das Frontend-Mount
      # - ./livinglabdashboard:/app/frontend
      - livinglab_node_modules:/app/frontend/node_modules
    networks:
      - kafka-net

  nginx:
    image: nginx:mainline-alpine
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/:/etc/nginx/conf.d/:ro
      - ./nginx/plugins.d/:/etc/nginx/plugins.d/:ro
      - ./nginx/sites-enabled.d/:/etc/nginx/sites-enabled.d/:ro
      - ./nginx/ssl/:/etc/nginx/ssl/:ro
      - ./www/:/var/www:ro
    depends_on:
      - livinglab
      - grafana
      - pgadmin
      - portainer
    ports:
      - "80:80"
      #- "443:443" - FÃ¼r HELLA-Server
    networks:
      - kafka-net

  db-init:
    build:
      context: ./kafka
      dockerfile: Dockerfile-init
    container_name: db-init
    environment:
      - DATABASE_URL=postgresql://lukasmetzler:lukasmetzler@postgres_new:5432/livinglabvisualization
    depends_on:
      - postgres
    networks:
      - kafka-net

volumes:
  postgres_data:
  grafana_data:
  livinglab_node_modules:

networks:
  kafka-net:
