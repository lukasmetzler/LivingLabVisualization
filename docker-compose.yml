version: "2"
services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_CREATE_TOPICS: ${KAFKA_TOPIC}:1:1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

  postgres:
    image: postgres
    container_name: postgres
    restart: always
    ports:
      - "${CONSUMER_POSTGRES_PORT}:5432"
    environment:
      POSTGRES_PASSWORD: ${CONSUMER_POSTGRES_PASSWORD}
      POSTGRES_USER: ${CONSUMER_POSTGRES_USER}
      POSTGRES_DB: ${CONSUMER_POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    command: ["postgres", "-c", "log_statement=all"]
    depends_on:
      - kafka

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgAdmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - postgres

  grafana:
    build: ./grafana-config
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - postgres

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9093"
    depends_on:
      - kafka

volumes:
  postgres-data:
